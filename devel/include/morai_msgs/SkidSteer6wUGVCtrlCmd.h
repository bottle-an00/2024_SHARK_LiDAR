// Generated by gencpp from file morai_msgs/SkidSteer6wUGVCtrlCmd.msg
// DO NOT EDIT!


#ifndef MORAI_MSGS_MESSAGE_SKIDSTEER6WUGVCTRLCMD_H
#define MORAI_MSGS_MESSAGE_SKIDSTEER6WUGVCTRLCMD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace morai_msgs
{
template <class ContainerAllocator>
struct SkidSteer6wUGVCtrlCmd_
{
  typedef SkidSteer6wUGVCtrlCmd_<ContainerAllocator> Type;

  SkidSteer6wUGVCtrlCmd_()
    : cmd_type(0)
    , Forward_input(false)
    , Backward_input(false)
    , Left_Turn_input(false)
    , Right_Turn_input(false)
    , left_front_wheel_rpm(0.0)
    , left_middle_wheel_rpm(0.0)
    , left_rear_wheel_rpm(0.0)
    , right_front_wheel_rpm(0.0)
    , right_middle_wheel_rpm(0.0)
    , right_rear_wheel_rpm(0.0)
    , Target_linear_velocity(0.0)
    , Target_angular_velocity(0.0)  {
    }
  SkidSteer6wUGVCtrlCmd_(const ContainerAllocator& _alloc)
    : cmd_type(0)
    , Forward_input(false)
    , Backward_input(false)
    , Left_Turn_input(false)
    , Right_Turn_input(false)
    , left_front_wheel_rpm(0.0)
    , left_middle_wheel_rpm(0.0)
    , left_rear_wheel_rpm(0.0)
    , right_front_wheel_rpm(0.0)
    , right_middle_wheel_rpm(0.0)
    , right_rear_wheel_rpm(0.0)
    , Target_linear_velocity(0.0)
    , Target_angular_velocity(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _cmd_type_type;
  _cmd_type_type cmd_type;

   typedef uint8_t _Forward_input_type;
  _Forward_input_type Forward_input;

   typedef uint8_t _Backward_input_type;
  _Backward_input_type Backward_input;

   typedef uint8_t _Left_Turn_input_type;
  _Left_Turn_input_type Left_Turn_input;

   typedef uint8_t _Right_Turn_input_type;
  _Right_Turn_input_type Right_Turn_input;

   typedef float _left_front_wheel_rpm_type;
  _left_front_wheel_rpm_type left_front_wheel_rpm;

   typedef float _left_middle_wheel_rpm_type;
  _left_middle_wheel_rpm_type left_middle_wheel_rpm;

   typedef float _left_rear_wheel_rpm_type;
  _left_rear_wheel_rpm_type left_rear_wheel_rpm;

   typedef float _right_front_wheel_rpm_type;
  _right_front_wheel_rpm_type right_front_wheel_rpm;

   typedef float _right_middle_wheel_rpm_type;
  _right_middle_wheel_rpm_type right_middle_wheel_rpm;

   typedef float _right_rear_wheel_rpm_type;
  _right_rear_wheel_rpm_type right_rear_wheel_rpm;

   typedef float _Target_linear_velocity_type;
  _Target_linear_velocity_type Target_linear_velocity;

   typedef float _Target_angular_velocity_type;
  _Target_angular_velocity_type Target_angular_velocity;





  typedef boost::shared_ptr< ::morai_msgs::SkidSteer6wUGVCtrlCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::morai_msgs::SkidSteer6wUGVCtrlCmd_<ContainerAllocator> const> ConstPtr;

}; // struct SkidSteer6wUGVCtrlCmd_

typedef ::morai_msgs::SkidSteer6wUGVCtrlCmd_<std::allocator<void> > SkidSteer6wUGVCtrlCmd;

typedef boost::shared_ptr< ::morai_msgs::SkidSteer6wUGVCtrlCmd > SkidSteer6wUGVCtrlCmdPtr;
typedef boost::shared_ptr< ::morai_msgs::SkidSteer6wUGVCtrlCmd const> SkidSteer6wUGVCtrlCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::morai_msgs::SkidSteer6wUGVCtrlCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::morai_msgs::SkidSteer6wUGVCtrlCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::morai_msgs::SkidSteer6wUGVCtrlCmd_<ContainerAllocator1> & lhs, const ::morai_msgs::SkidSteer6wUGVCtrlCmd_<ContainerAllocator2> & rhs)
{
  return lhs.cmd_type == rhs.cmd_type &&
    lhs.Forward_input == rhs.Forward_input &&
    lhs.Backward_input == rhs.Backward_input &&
    lhs.Left_Turn_input == rhs.Left_Turn_input &&
    lhs.Right_Turn_input == rhs.Right_Turn_input &&
    lhs.left_front_wheel_rpm == rhs.left_front_wheel_rpm &&
    lhs.left_middle_wheel_rpm == rhs.left_middle_wheel_rpm &&
    lhs.left_rear_wheel_rpm == rhs.left_rear_wheel_rpm &&
    lhs.right_front_wheel_rpm == rhs.right_front_wheel_rpm &&
    lhs.right_middle_wheel_rpm == rhs.right_middle_wheel_rpm &&
    lhs.right_rear_wheel_rpm == rhs.right_rear_wheel_rpm &&
    lhs.Target_linear_velocity == rhs.Target_linear_velocity &&
    lhs.Target_angular_velocity == rhs.Target_angular_velocity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::morai_msgs::SkidSteer6wUGVCtrlCmd_<ContainerAllocator1> & lhs, const ::morai_msgs::SkidSteer6wUGVCtrlCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace morai_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::SkidSteer6wUGVCtrlCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::SkidSteer6wUGVCtrlCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::SkidSteer6wUGVCtrlCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::SkidSteer6wUGVCtrlCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::SkidSteer6wUGVCtrlCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::SkidSteer6wUGVCtrlCmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::morai_msgs::SkidSteer6wUGVCtrlCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cb8a43878b1b2c65f50bd53e5a4c03f4";
  }

  static const char* value(const ::morai_msgs::SkidSteer6wUGVCtrlCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcb8a43878b1b2c65ULL;
  static const uint64_t static_value2 = 0xf50bd53e5a4c03f4ULL;
};

template<class ContainerAllocator>
struct DataType< ::morai_msgs::SkidSteer6wUGVCtrlCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "morai_msgs/SkidSteer6wUGVCtrlCmd";
  }

  static const char* value(const ::morai_msgs::SkidSteer6wUGVCtrlCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::morai_msgs::SkidSteer6wUGVCtrlCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 cmd_type\n"
"\n"
"bool Forward_input\n"
"bool Backward_input\n"
"bool Left_Turn_input\n"
"bool Right_Turn_input\n"
"\n"
"float32 left_front_wheel_rpm\n"
"float32 left_middle_wheel_rpm\n"
"float32 left_rear_wheel_rpm\n"
"float32 right_front_wheel_rpm\n"
"float32 right_middle_wheel_rpm\n"
"float32 right_rear_wheel_rpm\n"
"\n"
"float32 Target_linear_velocity\n"
"float32 Target_angular_velocity\n"
"\n"
;
  }

  static const char* value(const ::morai_msgs::SkidSteer6wUGVCtrlCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::morai_msgs::SkidSteer6wUGVCtrlCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cmd_type);
      stream.next(m.Forward_input);
      stream.next(m.Backward_input);
      stream.next(m.Left_Turn_input);
      stream.next(m.Right_Turn_input);
      stream.next(m.left_front_wheel_rpm);
      stream.next(m.left_middle_wheel_rpm);
      stream.next(m.left_rear_wheel_rpm);
      stream.next(m.right_front_wheel_rpm);
      stream.next(m.right_middle_wheel_rpm);
      stream.next(m.right_rear_wheel_rpm);
      stream.next(m.Target_linear_velocity);
      stream.next(m.Target_angular_velocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SkidSteer6wUGVCtrlCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::morai_msgs::SkidSteer6wUGVCtrlCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::morai_msgs::SkidSteer6wUGVCtrlCmd_<ContainerAllocator>& v)
  {
    s << indent << "cmd_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cmd_type);
    s << indent << "Forward_input: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Forward_input);
    s << indent << "Backward_input: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Backward_input);
    s << indent << "Left_Turn_input: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Left_Turn_input);
    s << indent << "Right_Turn_input: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Right_Turn_input);
    s << indent << "left_front_wheel_rpm: ";
    Printer<float>::stream(s, indent + "  ", v.left_front_wheel_rpm);
    s << indent << "left_middle_wheel_rpm: ";
    Printer<float>::stream(s, indent + "  ", v.left_middle_wheel_rpm);
    s << indent << "left_rear_wheel_rpm: ";
    Printer<float>::stream(s, indent + "  ", v.left_rear_wheel_rpm);
    s << indent << "right_front_wheel_rpm: ";
    Printer<float>::stream(s, indent + "  ", v.right_front_wheel_rpm);
    s << indent << "right_middle_wheel_rpm: ";
    Printer<float>::stream(s, indent + "  ", v.right_middle_wheel_rpm);
    s << indent << "right_rear_wheel_rpm: ";
    Printer<float>::stream(s, indent + "  ", v.right_rear_wheel_rpm);
    s << indent << "Target_linear_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.Target_linear_velocity);
    s << indent << "Target_angular_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.Target_angular_velocity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MORAI_MSGS_MESSAGE_SKIDSTEER6WUGVCTRLCMD_H
