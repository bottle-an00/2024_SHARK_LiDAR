// Generated by gencpp from file morai_msgs/FaultStatusInfo_Vehicle.msg
// DO NOT EDIT!


#ifndef MORAI_MSGS_MESSAGE_FAULTSTATUSINFO_VEHICLE_H
#define MORAI_MSGS_MESSAGE_FAULTSTATUSINFO_VEHICLE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <morai_msgs/FaultStatusInfo_Overall.h>
#include <morai_msgs/FaultStatusInfo_Overall.h>
#include <morai_msgs/FaultStatusInfo_Overall.h>
#include <morai_msgs/FaultStatusInfo_Overall.h>

namespace morai_msgs
{
template <class ContainerAllocator>
struct FaultStatusInfo_Vehicle_
{
  typedef FaultStatusInfo_Vehicle_<ContainerAllocator> Type;

  FaultStatusInfo_Vehicle_()
    : accel()
    , brake()
    , steer()
    , tires()  {
    }
  FaultStatusInfo_Vehicle_(const ContainerAllocator& _alloc)
    : accel(_alloc)
    , brake(_alloc)
    , steer(_alloc)
    , tires(_alloc)  {
  (void)_alloc;
    }



   typedef  ::morai_msgs::FaultStatusInfo_Overall_<ContainerAllocator>  _accel_type;
  _accel_type accel;

   typedef  ::morai_msgs::FaultStatusInfo_Overall_<ContainerAllocator>  _brake_type;
  _brake_type brake;

   typedef  ::morai_msgs::FaultStatusInfo_Overall_<ContainerAllocator>  _steer_type;
  _steer_type steer;

   typedef std::vector< ::morai_msgs::FaultStatusInfo_Overall_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::morai_msgs::FaultStatusInfo_Overall_<ContainerAllocator> >> _tires_type;
  _tires_type tires;





  typedef boost::shared_ptr< ::morai_msgs::FaultStatusInfo_Vehicle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::morai_msgs::FaultStatusInfo_Vehicle_<ContainerAllocator> const> ConstPtr;

}; // struct FaultStatusInfo_Vehicle_

typedef ::morai_msgs::FaultStatusInfo_Vehicle_<std::allocator<void> > FaultStatusInfo_Vehicle;

typedef boost::shared_ptr< ::morai_msgs::FaultStatusInfo_Vehicle > FaultStatusInfo_VehiclePtr;
typedef boost::shared_ptr< ::morai_msgs::FaultStatusInfo_Vehicle const> FaultStatusInfo_VehicleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::morai_msgs::FaultStatusInfo_Vehicle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::morai_msgs::FaultStatusInfo_Vehicle_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::morai_msgs::FaultStatusInfo_Vehicle_<ContainerAllocator1> & lhs, const ::morai_msgs::FaultStatusInfo_Vehicle_<ContainerAllocator2> & rhs)
{
  return lhs.accel == rhs.accel &&
    lhs.brake == rhs.brake &&
    lhs.steer == rhs.steer &&
    lhs.tires == rhs.tires;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::morai_msgs::FaultStatusInfo_Vehicle_<ContainerAllocator1> & lhs, const ::morai_msgs::FaultStatusInfo_Vehicle_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace morai_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::FaultStatusInfo_Vehicle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::FaultStatusInfo_Vehicle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::FaultStatusInfo_Vehicle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::FaultStatusInfo_Vehicle_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::FaultStatusInfo_Vehicle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::FaultStatusInfo_Vehicle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::morai_msgs::FaultStatusInfo_Vehicle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dcd69cdf7980329f2014366617eda419";
  }

  static const char* value(const ::morai_msgs::FaultStatusInfo_Vehicle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdcd69cdf7980329fULL;
  static const uint64_t static_value2 = 0x2014366617eda419ULL;
};

template<class ContainerAllocator>
struct DataType< ::morai_msgs::FaultStatusInfo_Vehicle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "morai_msgs/FaultStatusInfo_Vehicle";
  }

  static const char* value(const ::morai_msgs::FaultStatusInfo_Vehicle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::morai_msgs::FaultStatusInfo_Vehicle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "FaultStatusInfo_Overall accel\n"
"FaultStatusInfo_Overall brake\n"
"FaultStatusInfo_Overall steer\n"
"FaultStatusInfo_Overall[] tires\n"
"\n"
"\n"
"================================================================================\n"
"MSG: morai_msgs/FaultStatusInfo_Overall\n"
"bool status\n"
"int32[] fault_subclass\n"
;
  }

  static const char* value(const ::morai_msgs::FaultStatusInfo_Vehicle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::morai_msgs::FaultStatusInfo_Vehicle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.accel);
      stream.next(m.brake);
      stream.next(m.steer);
      stream.next(m.tires);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FaultStatusInfo_Vehicle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::morai_msgs::FaultStatusInfo_Vehicle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::morai_msgs::FaultStatusInfo_Vehicle_<ContainerAllocator>& v)
  {
    s << indent << "accel: ";
    s << std::endl;
    Printer< ::morai_msgs::FaultStatusInfo_Overall_<ContainerAllocator> >::stream(s, indent + "  ", v.accel);
    s << indent << "brake: ";
    s << std::endl;
    Printer< ::morai_msgs::FaultStatusInfo_Overall_<ContainerAllocator> >::stream(s, indent + "  ", v.brake);
    s << indent << "steer: ";
    s << std::endl;
    Printer< ::morai_msgs::FaultStatusInfo_Overall_<ContainerAllocator> >::stream(s, indent + "  ", v.steer);
    s << indent << "tires[]" << std::endl;
    for (size_t i = 0; i < v.tires.size(); ++i)
    {
      s << indent << "  tires[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::morai_msgs::FaultStatusInfo_Overall_<ContainerAllocator> >::stream(s, indent + "    ", v.tires[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MORAI_MSGS_MESSAGE_FAULTSTATUSINFO_VEHICLE_H
