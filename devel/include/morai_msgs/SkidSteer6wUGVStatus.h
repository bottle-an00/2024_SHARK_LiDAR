// Generated by gencpp from file morai_msgs/SkidSteer6wUGVStatus.msg
// DO NOT EDIT!


#ifndef MORAI_MSGS_MESSAGE_SKIDSTEER6WUGVSTATUS_H
#define MORAI_MSGS_MESSAGE_SKIDSTEER6WUGVSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace morai_msgs
{
template <class ContainerAllocator>
struct SkidSteer6wUGVStatus_
{
  typedef SkidSteer6wUGVStatus_<ContainerAllocator> Type;

  SkidSteer6wUGVStatus_()
    : header()
    , unique_id(0)
    , ctrl_mode(0)
    , acceleration()
    , position()
    , linear_velocity()
    , angular_velocity()
    , heading(0.0)
    , cmd_type(0)
    , left_front_wheel_rpm(0.0)
    , left_middle_wheel_rpm(0.0)
    , left_rear_wheel_rpm(0.0)
    , right_front_wheel_rpm(0.0)
    , right_middle_wheel_rpm(0.0)
    , right_rear_wheel_rpm(0.0)
    , lateral_offset(0.0)  {
    }
  SkidSteer6wUGVStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , unique_id(0)
    , ctrl_mode(0)
    , acceleration(_alloc)
    , position(_alloc)
    , linear_velocity(_alloc)
    , angular_velocity(_alloc)
    , heading(0.0)
    , cmd_type(0)
    , left_front_wheel_rpm(0.0)
    , left_middle_wheel_rpm(0.0)
    , left_rear_wheel_rpm(0.0)
    , right_front_wheel_rpm(0.0)
    , right_middle_wheel_rpm(0.0)
    , right_rear_wheel_rpm(0.0)
    , lateral_offset(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _unique_id_type;
  _unique_id_type unique_id;

   typedef int32_t _ctrl_mode_type;
  _ctrl_mode_type ctrl_mode;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _acceleration_type;
  _acceleration_type acceleration;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _linear_velocity_type;
  _linear_velocity_type linear_velocity;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _angular_velocity_type;
  _angular_velocity_type angular_velocity;

   typedef double _heading_type;
  _heading_type heading;

   typedef int32_t _cmd_type_type;
  _cmd_type_type cmd_type;

   typedef double _left_front_wheel_rpm_type;
  _left_front_wheel_rpm_type left_front_wheel_rpm;

   typedef double _left_middle_wheel_rpm_type;
  _left_middle_wheel_rpm_type left_middle_wheel_rpm;

   typedef double _left_rear_wheel_rpm_type;
  _left_rear_wheel_rpm_type left_rear_wheel_rpm;

   typedef double _right_front_wheel_rpm_type;
  _right_front_wheel_rpm_type right_front_wheel_rpm;

   typedef double _right_middle_wheel_rpm_type;
  _right_middle_wheel_rpm_type right_middle_wheel_rpm;

   typedef double _right_rear_wheel_rpm_type;
  _right_rear_wheel_rpm_type right_rear_wheel_rpm;

   typedef double _lateral_offset_type;
  _lateral_offset_type lateral_offset;





  typedef boost::shared_ptr< ::morai_msgs::SkidSteer6wUGVStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::morai_msgs::SkidSteer6wUGVStatus_<ContainerAllocator> const> ConstPtr;

}; // struct SkidSteer6wUGVStatus_

typedef ::morai_msgs::SkidSteer6wUGVStatus_<std::allocator<void> > SkidSteer6wUGVStatus;

typedef boost::shared_ptr< ::morai_msgs::SkidSteer6wUGVStatus > SkidSteer6wUGVStatusPtr;
typedef boost::shared_ptr< ::morai_msgs::SkidSteer6wUGVStatus const> SkidSteer6wUGVStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::morai_msgs::SkidSteer6wUGVStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::morai_msgs::SkidSteer6wUGVStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::morai_msgs::SkidSteer6wUGVStatus_<ContainerAllocator1> & lhs, const ::morai_msgs::SkidSteer6wUGVStatus_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.unique_id == rhs.unique_id &&
    lhs.ctrl_mode == rhs.ctrl_mode &&
    lhs.acceleration == rhs.acceleration &&
    lhs.position == rhs.position &&
    lhs.linear_velocity == rhs.linear_velocity &&
    lhs.angular_velocity == rhs.angular_velocity &&
    lhs.heading == rhs.heading &&
    lhs.cmd_type == rhs.cmd_type &&
    lhs.left_front_wheel_rpm == rhs.left_front_wheel_rpm &&
    lhs.left_middle_wheel_rpm == rhs.left_middle_wheel_rpm &&
    lhs.left_rear_wheel_rpm == rhs.left_rear_wheel_rpm &&
    lhs.right_front_wheel_rpm == rhs.right_front_wheel_rpm &&
    lhs.right_middle_wheel_rpm == rhs.right_middle_wheel_rpm &&
    lhs.right_rear_wheel_rpm == rhs.right_rear_wheel_rpm &&
    lhs.lateral_offset == rhs.lateral_offset;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::morai_msgs::SkidSteer6wUGVStatus_<ContainerAllocator1> & lhs, const ::morai_msgs::SkidSteer6wUGVStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace morai_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::SkidSteer6wUGVStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::SkidSteer6wUGVStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::SkidSteer6wUGVStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::SkidSteer6wUGVStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::SkidSteer6wUGVStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::SkidSteer6wUGVStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::morai_msgs::SkidSteer6wUGVStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d741d34a68b143895b122f334a1afe31";
  }

  static const char* value(const ::morai_msgs::SkidSteer6wUGVStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd741d34a68b14389ULL;
  static const uint64_t static_value2 = 0x5b122f334a1afe31ULL;
};

template<class ContainerAllocator>
struct DataType< ::morai_msgs::SkidSteer6wUGVStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "morai_msgs/SkidSteer6wUGVStatus";
  }

  static const char* value(const ::morai_msgs::SkidSteer6wUGVStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::morai_msgs::SkidSteer6wUGVStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"int32 unique_id\n"
"int32 ctrl_mode\n"
"\n"
"geometry_msgs/Vector3 acceleration\n"
"geometry_msgs/Vector3 position\n"
"geometry_msgs/Vector3 linear_velocity\n"
"geometry_msgs/Vector3 angular_velocity\n"
"\n"
"float64 heading\n"
"int32 cmd_type\n"
"\n"
"float64 left_front_wheel_rpm\n"
"float64 left_middle_wheel_rpm\n"
"float64 left_rear_wheel_rpm\n"
"float64 right_front_wheel_rpm\n"
"float64 right_middle_wheel_rpm\n"
"float64 right_rear_wheel_rpm\n"
"\n"
"float64 lateral_offset\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::morai_msgs::SkidSteer6wUGVStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::morai_msgs::SkidSteer6wUGVStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.unique_id);
      stream.next(m.ctrl_mode);
      stream.next(m.acceleration);
      stream.next(m.position);
      stream.next(m.linear_velocity);
      stream.next(m.angular_velocity);
      stream.next(m.heading);
      stream.next(m.cmd_type);
      stream.next(m.left_front_wheel_rpm);
      stream.next(m.left_middle_wheel_rpm);
      stream.next(m.left_rear_wheel_rpm);
      stream.next(m.right_front_wheel_rpm);
      stream.next(m.right_middle_wheel_rpm);
      stream.next(m.right_rear_wheel_rpm);
      stream.next(m.lateral_offset);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SkidSteer6wUGVStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::morai_msgs::SkidSteer6wUGVStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::morai_msgs::SkidSteer6wUGVStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "unique_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.unique_id);
    s << indent << "ctrl_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ctrl_mode);
    s << indent << "acceleration: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.acceleration);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "linear_velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.linear_velocity);
    s << indent << "angular_velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.angular_velocity);
    s << indent << "heading: ";
    Printer<double>::stream(s, indent + "  ", v.heading);
    s << indent << "cmd_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cmd_type);
    s << indent << "left_front_wheel_rpm: ";
    Printer<double>::stream(s, indent + "  ", v.left_front_wheel_rpm);
    s << indent << "left_middle_wheel_rpm: ";
    Printer<double>::stream(s, indent + "  ", v.left_middle_wheel_rpm);
    s << indent << "left_rear_wheel_rpm: ";
    Printer<double>::stream(s, indent + "  ", v.left_rear_wheel_rpm);
    s << indent << "right_front_wheel_rpm: ";
    Printer<double>::stream(s, indent + "  ", v.right_front_wheel_rpm);
    s << indent << "right_middle_wheel_rpm: ";
    Printer<double>::stream(s, indent + "  ", v.right_middle_wheel_rpm);
    s << indent << "right_rear_wheel_rpm: ";
    Printer<double>::stream(s, indent + "  ", v.right_rear_wheel_rpm);
    s << indent << "lateral_offset: ";
    Printer<double>::stream(s, indent + "  ", v.lateral_offset);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MORAI_MSGS_MESSAGE_SKIDSTEER6WUGVSTATUS_H
